"""
SwipeStyle Veritabanƒ± Tabanlƒ± Kategori Agent Mod√ºl√º
==================================================

Bu mod√ºl, SwipeStyle uygulamasƒ±nƒ±n kategori y√∂netimi i≈ülevlerini veritabanƒ± kullanarak ger√ßekle≈ütirir.
SQLAlchemy modelleri kullanarak kategorileri y√ºkler, kaydeder ve yeni kategoriler olu≈üturur.

Ana Sƒ±nƒ±flar:
- DatabaseCategoryAgent: Veritabanƒ± tabanlƒ± kategori y√∂netimi ana sƒ±nƒ±fƒ±

Fonksiyonlar:
- generate_specs_for_category: Yeni kategori i√ßin √∂zellikler olu≈üturur (category_agent.py'den kopyalandƒ±)

√ñzellikler:
- SQLAlchemy ORM kullanƒ±mƒ±
- Veritabanƒ± transaction y√∂netimi
- Kategori tespiti ve e≈üle≈ütirme
- Gemini AI ile yeni kategori olu≈üturma
- Debug log'larƒ±

Gereksinimler:
- SQLAlchemy modelleri (models.py)
- Google Generative AI (Gemini)
- .env dosyasƒ±nda GEMINI_API_KEY
"""

import json
import os
from dotenv import load_dotenv
import google.generativeai as genai
from app.models import db, Category, CategorySpec

load_dotenv()
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

def generate_specs_for_category(category):
    """
    Gemini AI kullanarak yeni kategori i√ßin √∂zellikler ve sorular olu≈üturur.
    
    Bu fonksiyon, Gemini AI'ya kategori adƒ±nƒ± g√∂nderir ve o kategori
    i√ßin uygun sorular, emojiler ve anahtar kelimeler olu≈üturmasƒ±nƒ± ister.
    Sonu√ß JSON formatƒ±nda d√∂ner ve debug i√ßin output.txt'ye yazƒ±lƒ±r.
    
    Args:
        category (str): Yeni kategori adƒ± (√∂rn: "Tablet")
        
    Returns:
        dict or list or None: Olu≈üturulan √∂zellikler veya None
        
    D√∂nen Format:
        {
            "category_name": "Tablet",
            "specs": [
                {"key": "Ekran Boyutu", "question": "B√ºy√ºk ekran ister misiniz?", "emoji": "üì±"},
                {"key": "Depolama", "question": "Fazla depolama alanƒ± ister misiniz?", "emoji": "üíæ"}
            ]
        }
        
    √ñrnek:
        >>> generate_specs_for_category("Tablet")
        {"category_name": "Tablet", "specs": [...]}
    """
    try:
        model = genai.GenerativeModel('gemini-2.5-flash')
        prompt = (
            f"'{category}' kategorisi i√ßin T√ºrk√ße olarak 3-5 soru ve emoji √∂ner. "
            "Sadece JSON listesi d√∂nd√ºr, ba≈üka hi√ßbir metin veya a√ßƒ±klama ekleme. "
            "Her soru i√ßin bir anahtar (key), bir soru (question), bir emoji (emoji) i√ßeren bir JSON listesi d√∂nd√ºr.\n"
            "√ñrnek format: "
            '[{"key": "Kablosuz", "question": "Kablosuz baƒülantƒ± ister misiniz?", "emoji": "üì∂"}]'
        )
        response = model.generate_content(prompt)
        
        # Clean the response text - remove markdown code blocks
        response_text = response.text.strip()
        if response_text.startswith('```json'):
            response_text = response_text[7:]  # Remove ```json
        if response_text.startswith('```'):
            response_text = response_text[3:]   # Remove ```
        if response_text.endswith('```'):
            response_text = response_text[:-3]  # Remove trailing ```
        response_text = response_text.strip()
        
        # Debug: Write prompt and output to output.txt
        try:
            parsed = json.loads(response_text)
            pretty_output = json.dumps(parsed, ensure_ascii=False, indent=2)
        except Exception:
            pretty_output = response_text
        with open('output.txt', 'a', encoding='utf-8') as debug_file:
            debug_file.write(f"PROMPT:\n{prompt}\n\nCLEANED OUTPUT:\n{pretty_output}\n{'='*40}\n")
        
        arr = None
        try:
            arr = json.loads(response_text)
        except Exception:
            # If Gemini output is not valid JSON, return None
            return None
        
        # Accept both list and dict with 'specs' key
        if isinstance(arr, list) and all(isinstance(x, dict) and 'key' in x and 'question' in x and 'emoji' in x for x in arr):
            return arr
        if isinstance(arr, dict):
            # If output is {"Category": {"specs": [...]}}
            for v in arr.values():
                if isinstance(v, dict) and 'specs' in v and isinstance(v['specs'], list):
                    specs = v['specs']
                    if all(isinstance(x, dict) and 'key' in x and 'question' in x and 'emoji' in x for x in specs):
                        return {'category_name': list(arr.keys())[0], 'specs': specs}
            # If output is {"specs": [...]}
            if 'specs' in arr and isinstance(arr['specs'], list):
                specs = arr['specs']
                if all(isinstance(x, dict) and 'key' in x and 'question' in x and 'emoji' in x for x in specs):
                    return {'category_name': category, 'specs': specs}
        return None
    except Exception as e:
        # Debug: Write exception to output.txt
        with open('output.txt', 'a', encoding='utf-8') as debug_file:
            debug_file.write(f"EXCEPTION:\n{str(e)}\n{'='*40}\n")
        # If Gemini API call fails, return None
        return None

class DatabaseCategoryAgent:
    """
    SwipeStyle Veritabanƒ± Tabanlƒ± Kategori Y√∂netimi Ana Sƒ±nƒ±fƒ±
    
    Bu sƒ±nƒ±f, √ºr√ºn kategorilerini veritabanƒ± kullanarak y√∂netir ve yeni kategoriler olu≈üturur.
    SQLAlchemy modelleri kullanarak kategorileri veritabanƒ±ndan y√ºkler, kaydeder ve 
    kullanƒ±cƒ± sorgularƒ±na g√∂re kategori e≈üle≈ütirmesi yapar.
    
    √ñzellikler:
    - Veritabanƒ± tabanlƒ± kategori y√∂netimi
    - SQLAlchemy ORM kullanƒ±mƒ±
    - Transaction g√ºvenliƒüi
    - Otomatik kategori olu≈üturma
    
    Ana Metodlar:
    - get_or_create_category(): Kategori tespiti/olu≈üturma
    - get_categories(): Kategori listesi d√∂ner
    - get_category_by_name(): ƒ∞sme g√∂re kategori getir
    - create_category_with_specs(): Yeni kategori ve √∂zellikleri olu≈ütur
    
    Kullanƒ±m:
        >>> agent = DatabaseCategoryAgent()
        >>> category, created = agent.get_or_create_category("kablosuz kulaklƒ±k")
        >>> print(category.name, created)
        "Headphones" False
    """
    
    def __init__(self):
        """
        DatabaseCategoryAgent'ƒ± ba≈ülatƒ±r.
        
        Veritabanƒ± baƒülantƒ±sƒ±nƒ± kontrol eder ve gerekirse tablolarƒ± olu≈üturur.
        """
        pass

    def get_or_create_category(self, user_query_or_category, language="tr"):
        """
        Kullanƒ±cƒ± sorgusuna g√∂re kategori tespiti yapar veya yeni kategori olu≈üturur.
        
        Bu metod √∂nce veritabanƒ±nda mevcut kategorilerde e≈üle≈üme arar. Eƒüer bulamazsa,
        Gemini AI kullanarak yeni kategori olu≈üturur ve veritabanƒ±na kaydeder.
        
        Args:
            user_query_or_category (str): Kullanƒ±cƒ± sorgusu veya kategori adƒ±
            
        Returns:
            tuple: (category, created)
                - category (Category): Tespit edilen/olu≈üturulan kategori nesnesi
                - created (bool): Yeni olu≈üturuldu mu? (True/False)
                
        √ñrnek:
            >>> agent = DatabaseCategoryAgent()
            >>> category, created = agent.get_or_create_category("kablosuz kulaklƒ±k")
            >>> print(f"Kategori: {category.name}, Yeni mi: {created}")
            Kategori: Headphones, Yeni mi: False
        """
        # Mevcut kategorilerde e≈üle≈üme ara
        categories = Category.query.all()
        
        # √ñnce tam e≈üle≈üme ara
        for cat in categories:
            if cat.name.lower() == user_query_or_category.lower():
                return cat, False
        
        # Sonra kƒ±smi e≈üle≈üme ara
        for cat in categories:
            if cat.name.lower() in user_query_or_category.lower() or user_query_or_category.lower() in cat.name.lower():
                return cat, False
        
        # T√ºrk√ße sorgularƒ± i√ßin √∂zel e≈üle≈ütirmeler
        query_lower = user_query_or_category.lower()
        for cat in categories:
            cat_lower = cat.name.lower()
            
            # Kulaklƒ±k tespiti
            if any(word in query_lower for word in ['kulaklƒ±k', 'kulaklƒ±ƒüƒ±', 'headphone', 'earphone', 'earbud']):
                if cat_lower == 'headphones':
                    return cat, False
            
            # Mouse tespiti
            if any(word in query_lower for word in ['mouse', 'fare', 'maus']):
                if cat_lower == 'mouse':
                    return cat, False
            
            # Phone tespiti  
            if any(word in query_lower for word in ['phone', 'telefon', 'mobil', 'cep']):
                if cat_lower == 'phone':
                    return cat, False
            
            # Laptop tespiti
            if any(word in query_lower for word in ['laptop', 'diz√ºst√º', 'notebook', 'bilgisayar']):
                if cat_lower == 'laptop':
                    return cat, False
        
        # E≈üle≈üme bulunamazsa, yeni kategori olu≈ütur
        specs_result = generate_specs_for_category(user_query_or_category)
        if specs_result:
            try:
                # Kategori adƒ±nƒ± belirle
                if isinstance(specs_result, dict) and 'category_name' in specs_result:
                    cat_name = specs_result['category_name']
                    specs = specs_result['specs']
                elif isinstance(specs_result, list):
                    cat_name = user_query_or_category
                    specs = specs_result
                else:
                    return None, False
                
                # Yeni kategori olu≈ütur
                category = Category(name=cat_name)
                db.session.add(category)
                db.session.flush()  # ID'yi al ama hen√ºz commit etme
                
                # √ñzellikleri ekle
                for spec_data in specs:
                    spec = CategorySpec(
                        category_id=category.id,
                        key=spec_data['key'],
                        question=spec_data['question'],
                        emoji=spec_data['emoji']
                    )
                    db.session.add(spec)
                
                # T√ºm deƒüi≈üiklikleri kaydet
                db.session.commit()
                return category, True
                
            except Exception as e:
                db.session.rollback()
                # Debug: Write exception to output.txt
                with open('output.txt', 'a', encoding='utf-8') as debug_file:
                    debug_file.write(f"DATABASE EXCEPTION:\n{str(e)}\n{'='*40}\n")
                return None, False
        
        return None, False

    def get_categories(self):
        """
        T√ºm kategorileri veritabanƒ±ndan getirir.
        
        Returns:
            list: Category nesneleri listesi
            
        √ñrnek:
            >>> agent = DatabaseCategoryAgent()
            >>> categories = agent.get_categories()
            >>> for cat in categories:
            ...     print(cat.name)
            Mouse
            Headphones
            Phone
            Laptop
        """
        return Category.query.all()

    def get_category_by_name(self, name):
        """
        ƒ∞sme g√∂re kategori getirir.
        
        Args:
            name (str): Kategori adƒ±
            
        Returns:
            Category or None: Bulunan kategori nesnesi veya None
            
        √ñrnek:
            >>> agent = DatabaseCategoryAgent()
            >>> category = agent.get_category_by_name("Headphones")
            >>> print(category.name if category else "Not found")
            Headphones
        """
        return Category.query.filter_by(name=name).first()

    def create_category_with_specs(self, name, specs):
        """
        Yeni kategori ve √∂zelliklerini olu≈üturur.
        
        Args:
            name (str): Kategori adƒ±
            specs (list): √ñzellik listesi [{"key": "", "question": "", "emoji": ""}]
            
        Returns:
            tuple: (category, success)
                - category (Category): Olu≈üturulan kategori nesnesi
                - success (bool): Ba≈üarƒ±lƒ± mƒ±?
                
        √ñrnek:
            >>> specs = [{"key": "Test", "question": "Test?", "emoji": "üß™"}]
            >>> category, success = agent.create_category_with_specs("TestCat", specs)
            >>> print(f"Success: {success}")
            Success: True
        """
        try:
            # Kategori zaten var mƒ± kontrol et
            existing = Category.query.filter_by(name=name).first()
            if existing:
                return existing, False
            
            # Yeni kategori olu≈ütur
            category = Category(name=name)
            db.session.add(category)
            db.session.flush()  # ID'yi al
            
            # √ñzellikleri ekle
            for spec_data in specs:
                spec = CategorySpec(
                    category_id=category.id,
                    key=spec_data['key'],
                    question=spec_data['question'],
                    emoji=spec_data['emoji']
                )
                db.session.add(spec)
            
            db.session.commit()
            return category, True
            
        except Exception as e:
            db.session.rollback()
            # Debug: Write exception to output.txt
            with open('output.txt', 'a', encoding='utf-8') as debug_file:
                debug_file.write(f"CREATE CATEGORY EXCEPTION:\n{str(e)}\n{'='*40}\n")
            return None, False

    def get_categories_dict(self, language="tr"):
        """
        Kategorileri eski JSON formatƒ±na uygun s√∂zl√ºk olarak d√∂nd√ºr√ºr.
        
        Bu metod, eski API ile uyumluluƒüu korumak i√ßin kullanƒ±lƒ±r.
        Dil desteƒüi eklenmi≈ütir.
        
        Args:
            language (str): Dil kodu ("tr" veya "en")
        
        Returns:
            dict: JSON formatƒ±nda kategori s√∂zl√ºƒü√º
            
        Format:
            {
                "Mouse": {
                    "specs": [
                        {"key": "Kablosuz", "question": "...", "emoji": "üñ±Ô∏è"}
                    ]
                }
            }
        """
        categories = self.get_categories()
        result = {}
        for category in categories:
            result[category.name] = {
                "specs": [spec.to_dict(language) for spec in category.specs]
            }
        return result

    def get_shopping_recommendations(self, query, country="TR", language="tr"):
        """
        Mock shopping √∂nerileri d√∂nd√ºr√ºr (Google Shopping i√ßin).
        
        Args:
            query (str): Arama sorgusu
            country (str): √úlke kodu
            language (str): Dil kodu
            
        Returns:
            dict: Mock √ºr√ºn √∂nerileri
        """
        # Currency mapping
        currency_map = {
            "TR": "‚Ç∫",
            "US": "$", 
            "GB": "¬£",
            "DE": "‚Ç¨",
            "FR": "‚Ç¨"
        }
        
        currency = currency_map.get(country, "$")
        
        # Product templates
        if language == "tr":
            templates = [
                f"Profesyonel {query.title()} - Model A",
                f"Kaliteli {query.title()} - Model B", 
                f"Ekonomik {query.title()} - Model C"
            ]
            stores = ["teknosa.com", "hepsiburada.com", "trendyol.com"]
        else:
            templates = [
                f"Premium {query.title()} - Model A",
                f"Professional {query.title()} - Model B",
                f"Budget {query.title()} - Model C"
            ]
            stores = ["amazon.com", "bestbuy.com", "ebay.com"]
        
        mock_products = []
        for i, (template, store) in enumerate(zip(templates, stores)):
            price = f"{currency}{299 - i*100}"
            mock_products.append({
                "title": template,
                "price": price,
                "source": store,
                "link": f"https://{store}/product{i+1}",
                "image": f"https://via.placeholder.com/200x200?text=Product+{i+1}",
                "rating": 4.5 - i*0.3,
                "reviews": 1250 - i*400,
                "position": i+1
            })
        
        return {
            "query": query,
            "country": country,
            "language": language,
            "total_results": len(mock_products),
            "products": mock_products
        }

    def save_user_settings(self, session_id, language, country):
        """
        Kullanƒ±cƒ± ayarlarƒ±nƒ± kaydeder.
        
        Args:
            session_id (str): Oturum ID'si
            language (str): Dil tercihi
            country (str): √úlke tercihi
            
        Returns:
            bool: Ba≈üarƒ±lƒ± mƒ±?
        """
        try:
            from app.models import UserSettings
            
            # Mevcut ayarlarƒ± ara
            settings = UserSettings.query.filter_by(session_id=session_id).first()
            
            if settings:
                # G√ºncelle
                settings.language = language
                settings.country = country
            else:
                # Yeni olu≈ütur
                settings = UserSettings(
                    session_id=session_id,
                    language=language,
                    country=country
                )
                db.session.add(settings)
            
            db.session.commit()
            return True
            
        except Exception as e:
            db.session.rollback()
            with open('output.txt', 'a', encoding='utf-8') as debug_file:
                debug_file.write(f"SETTINGS SAVE ERROR:\n{str(e)}\n{'='*40}\n")
            return False

    def get_user_settings(self, session_id):
        """
        Kullanƒ±cƒ± ayarlarƒ±nƒ± getirir.
        
        Args:
            session_id (str): Oturum ID'si
            
        Returns:
            dict: Kullanƒ±cƒ± ayarlarƒ±
        """
        try:
            from app.models import UserSettings
            
            settings = UserSettings.query.filter_by(session_id=session_id).first()
            
            if settings:
                return {
                    "session_id": settings.session_id,
                    "language": settings.language,
                    "country": settings.country
                }
            else:
                # Varsayƒ±lan ayarlar
                return {
                    "session_id": session_id,
                    "language": "tr",
                    "country": "TR"
                }
                
        except Exception as e:
            with open('output.txt', 'a', encoding='utf-8') as debug_file:
                debug_file.write(f"SETTINGS GET ERROR:\n{str(e)}\n{'='*40}\n")
            return {
                "session_id": session_id,
                "language": "tr",
                "country": "TR"
            }

    def get_supported_countries(self):
        """Desteklenen √ºlke listesini d√∂nd√ºr√ºr"""
        return {
            "TR": "T√ºrkiye",
            "US": "United States", 
            "GB": "United Kingdom",
            "DE": "Germany",
            "FR": "France"
        }
    
    def get_supported_languages(self):
        """Desteklenen dil listesini d√∂nd√ºr√ºr"""
        return {
            "tr": "T√ºrk√ße",
            "en": "English"
        }
