"""
SwipeStyle Kategori Agent ModÃ¼lÃ¼
================================

Bu modÃ¼l, SwipeStyle uygulamasÄ±nÄ±n kategori yÃ¶netimi iÅŸlevlerini iÃ§erir.
Kategorileri yÃ¼kler, kaydeder ve yeni kategoriler oluÅŸturur.

Ana SÄ±nÄ±flar:
- CategoryAgent: Kategori yÃ¶netimi ana sÄ±nÄ±fÄ±

Fonksiyonlar:
- generate_specs_for_category: Yeni kategori iÃ§in Ã¶zellikler oluÅŸturur

Ã–zellikler:
- Kategori tespiti ve eÅŸleÅŸtirme
- Gemini AI ile yeni kategori oluÅŸturma
- JSON dosya yÃ¶netimi
- Debug log'larÄ±

Gereksinimler:
- Google Generative AI (Gemini)
- categories.json dosyasÄ±
- .env dosyasÄ±nda GEMINI_API_KEY
"""

import json
import os
from dotenv import load_dotenv
import google.generativeai as genai

load_dotenv()
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

def generate_specs_for_category(category):
    """
    Gemini AI kullanarak yeni kategori iÃ§in Ã¶zellikler ve sorular oluÅŸturur.
    
    Bu fonksiyon, Gemini AI'ya kategori adÄ±nÄ± gÃ¶nderir ve o kategori
    iÃ§in uygun sorular, emojiler ve anahtar kelimeler oluÅŸturmasÄ±nÄ± ister.
    SonuÃ§ JSON formatÄ±nda dÃ¶ner ve debug iÃ§in output.txt'ye yazÄ±lÄ±r.
    
    Args:
        category (str): Yeni kategori adÄ± (Ã¶rn: "Tablet")
        
    Returns:
        dict or list or None: OluÅŸturulan Ã¶zellikler veya None
        
    DÃ¶nen Format:
        {
            "category_name": "Tablet",
            "specs": [
                {"key": "Ekran Boyutu", "question": "BÃ¼yÃ¼k ekran ister misiniz?", "emoji": "ðŸ“±"},
                {"key": "Depolama", "question": "Fazla depolama alanÄ± ister misiniz?", "emoji": "ðŸ’¾"}
            ]
        }
        
    Ã–rnek:
        >>> generate_specs_for_category("Tablet")
        {"category_name": "Tablet", "specs": [...]}
    """
    try:
        model = genai.GenerativeModel('gemini-2.5-flash')
        prompt = (
            f"'{category}' kategorisi iÃ§in TÃ¼rkÃ§e olarak 3-5 soru ve emoji Ã¶ner. "
            "Her soru iÃ§in bir anahtar (key), bir soru (question), bir emoji (emoji) iÃ§eren bir JSON listesi dÃ¶ndÃ¼r.\n"
            """" Example Output: Headphones": {
    "specs": [
      {"key": "Kablosuz", "question": "Kablosuz kulaklÄ±k ister misiniz?", "emoji": "ðŸŽ§"},
      {"key": "ANC", "question": "Aktif gÃ¼rÃ¼ltÃ¼ engelleme Ã¶nemli mi?", "emoji": "ðŸ”‡"},
      {"key": "Bass", "question": "GÃ¼Ã§lÃ¼ bass ister misiniz?", "emoji": "ðŸŽµ"},
      {"key": "Mikrofon Kalitesi", "question": "Mikrofon kalitesi Ã¶nemli mi?", "emoji": "ðŸŽ¤"},
      {"key": "Kulak Ä°Ã§i", "question": "Kulak iÃ§i mi tercih edersiniz?", "emoji": "ðŸ‘‚"},
      {"key": "Kulak ÃœstÃ¼", "question": "Kulak Ã¼stÃ¼ mÃ¼ tercih edersiniz?", "emoji": "ðŸ¦»"}
    ]
  },"""
        )
        response = model.generate_content(prompt)
        # Debug: Write prompt and output to output.txt
        # Try to pretty-print the output if it's valid JSON, else print raw
        try:
            parsed = json.loads(response.text)
            pretty_output = json.dumps(parsed, ensure_ascii=False, indent=2)
        except Exception:
            pretty_output = response.text
        with open('output.txt', 'a', encoding='utf-8') as debug_file:
            debug_file.write(f"PROMPT:\n{prompt}\n\nOUTPUT:\n{pretty_output}\n{'='*40}\n")
        arr = None
        try:
            arr = json.loads(response.text)
        except Exception:
            # If Gemini output is not valid JSON, return None
            return None
        # Accept both list and dict with 'specs' key
        if isinstance(arr, list) and all(isinstance(x, dict) and 'key' in x and 'question' in x and 'emoji' in x for x in arr):
            return arr
        if isinstance(arr, dict):
            # If output is {"Category": {"specs": [...]}}
            for v in arr.values():
                if isinstance(v, dict) and 'specs' in v and isinstance(v['specs'], list):
                    specs = v['specs']
                    if all(isinstance(x, dict) and 'key' in x and 'question' in x and 'emoji' in x for x in specs):
                        return {'category_name': list(arr.keys())[0], 'specs': specs}
            # If output is {"specs": [...]}
            if 'specs' in arr and isinstance(arr['specs'], list):
                specs = arr['specs']
                if all(isinstance(x, dict) and 'key' in x and 'question' in x and 'emoji' in x for x in specs):
                    return {'category_name': category, 'specs': specs}
        return None
    except Exception as e:
        # Debug: Write exception to output.txt
        with open('output.txt', 'a', encoding='utf-8') as debug_file:
            debug_file.write(f"EXCEPTION:\n{str(e)}\n{'='*40}\n")
        # If Gemini API call fails, return None
        return None

class CategoryAgent:
    """
    SwipeStyle Kategori YÃ¶netimi Ana SÄ±nÄ±fÄ±
    
    Bu sÄ±nÄ±f, Ã¼rÃ¼n kategorilerini yÃ¶netir ve yeni kategoriler oluÅŸturur.
    Kategorileri JSON dosyasÄ±ndan yÃ¼kler, kaydeder ve kullanÄ±cÄ± sorgularÄ±na
    gÃ¶re kategori eÅŸleÅŸtirmesi yapar.
    
    Ã–zellikler:
    - categories_path: Kategori dosyasÄ± yolu
    - categories: YÃ¼klenen kategori sÃ¶zlÃ¼ÄŸÃ¼
    
    Ana Metodlar:
    - get_or_create_category(): Kategori tespiti/oluÅŸturma
    - _load_categories(): Kategorileri yÃ¼kler
    - _save_categories(): Kategorileri kaydeder
    - get_categories(): Kategori listesi dÃ¶ner
    
    KullanÄ±m:
        >>> agent = CategoryAgent()
        >>> category, created = agent.get_or_create_category("kablosuz kulaklÄ±k")
        >>> print(category, created)
        "Headphones" False
    """
    
    def __init__(self, categories_path='categories.json'):
        """
        CategoryAgent'Ä± baÅŸlatÄ±r.
        
        Args:
            categories_path (str): Kategori dosyasÄ±nÄ±n yolu (varsayÄ±lan: 'categories.json')
        """
        self.categories_path = categories_path
        self._load_categories()

    def _load_categories(self):
        """
        Kategorileri JSON dosyasÄ±ndan yÃ¼kler.
        
        EÄŸer dosya mevcut deÄŸilse, boÅŸ bir sÃ¶zlÃ¼k oluÅŸturur.
        Bu metod, __init__ tarafÄ±ndan otomatik olarak Ã§aÄŸrÄ±lÄ±r.
        """
        if os.path.exists(self.categories_path):
            with open(self.categories_path, 'r', encoding='utf-8') as f:
                self.categories = json.load(f)
        else:
            self.categories = {}

    def _save_categories(self):
        """
        Mevcut kategorileri JSON dosyasÄ±na kaydeder.
        
        Kategoriler UTF-8 encoding ile kaydedilir ve
        TÃ¼rkÃ§e karakterler korunur.
        """
        with open(self.categories_path, 'w', encoding='utf-8') as f:
            json.dump(self.categories, f, ensure_ascii=False, indent=2)

    def get_or_create_category(self, user_query_or_category):
        """
        KullanÄ±cÄ± sorgusuna gÃ¶re kategori tespiti yapar veya yeni kategori oluÅŸturur.
        
        Bu metod Ã¶nce mevcut kategorilerde eÅŸleÅŸme arar. EÄŸer bulamazsa,
        Gemini AI kullanarak yeni kategori oluÅŸturur ve dosyaya kaydeder.
        
        Args:
            user_query_or_category (str): KullanÄ±cÄ± sorgusu veya kategori adÄ±
            
        Returns:
            tuple: (category_name, created)
                - category_name (str): Tespit edilen/oluÅŸturulan kategori adÄ±
                - created (bool): Yeni oluÅŸturuldu mu? (True/False)
                
        Ã–rnek:
            >>> agent = CategoryAgent()
            >>> category, created = agent.get_or_create_category("kablosuz kulaklÄ±k")
            >>> print(f"Kategori: {category}, Yeni mi: {created}")
            Kategori: Headphones, Yeni mi: False
        """
        # Try to match user input to an existing category
        for cat in self.categories:
            if cat.lower() in user_query_or_category.lower() or user_query_or_category.lower() in cat.lower():
                return cat, False
        # If not found, create new category
        specs_result = generate_specs_for_category(user_query_or_category)
        if specs_result:
            # If specs_result is a dict with 'category_name' and 'specs', use that
            if isinstance(specs_result, dict) and 'category_name' in specs_result and 'specs' in specs_result:
                cat_name = specs_result['category_name']
                specs = specs_result['specs']
                self.categories[cat_name] = {"specs": specs}
                self._save_categories()
                return cat_name, True
            # If specs_result is a list, use the original category name
            elif isinstance(specs_result, list):
                self.categories[user_query_or_category] = {"specs": specs_result}
                self._save_categories()
                return user_query_or_category, True
        return None, False

    def get_categories(self):
        """
        TÃ¼m kategori adlarÄ±nÄ±n listesini dÃ¶ndÃ¼rÃ¼r.
        
        Returns:
            list: Kategori adlarÄ± listesi
            
        Ã–rnek:
            >>> agent = CategoryAgent()
            >>> categories = agent.get_categories()
            >>> print(categories)
            ['Mouse', 'Headphones', 'Phone', 'Laptop']
        """
        return list(self.categories.keys())
